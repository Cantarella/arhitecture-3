@startuml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Context.puml
!define DEVICONS https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/devicons
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Context.puml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

!include <cloudinsight/kafka>
!include <office/Servers/file_server>
AddContainerTag("files", $sprite="file_server", $legendText="file server container")
!include DEVICONS/java.puml
AddElementTag("kafka", $bgColor="#f7f7f7", $fontColor="#000000")


SystemQueue(kafka, "Kafka", "", $sprite="kafka", $tags="kafka")

System_Boundary(UsersSystem, "User's Service") {
  Component_Ext(UserService, "User Service", "")
  ComponentDb(UsersDb, "Users Db", "Postgres SQL", "хранит данные о пользователях и зарегистрированном оборудовании")
  Rel(UserService, UsersDb, "Запись данных", "")
}

System_Boundary(HeatingSystem, "Heating System") {
  Component(HeatingService, "Heating Service", "")
  ComponentDb(HeatingDb, "Heating Db", "Postgres SQL", "хранит связку пользователь-оборудование и метрики состояний")

  Rel(HeatingService, HeatingDb, "Запись данных", "")
}

System_Boundary(TempSystem, "Temperature Service") {
    Component_Ext(TempModule, "Сервис контроля температуры")
    ComponentDb(TemperatureDb, "Temperature Db", "MongoDb", "Хранит данные о температуре с привязкой к оборудованию")
    Rel(TempModule, TemperatureDb, "Последний замер")
    Rel(HeatingService, TempModule, "Получение текущей температуры", "HTTP")
}

System_Boundary(LightingSystem, "Lighting Service") {
  Component(LightingService, "Lighting Service", "")
  Component_Ext(LightingCommandInterpreter, "Интерпретатор команд", "")
  Component_Ext(LightingStatesInterpreter, "Интерпретатор состояний", "")
  ComponentDb(LightingDb, "Lighting Db", "Postgres SQL", "хранит связку пользователь-оборудование и метрики состояний")

  Rel(LightingService, LightingCommandInterpreter, "Перевод команды в понятный оборудованию формат", "HTTP")
  Rel(LightingCommandInterpreter, LightingService , "Получение отформатированной команды", "HTTP")
  Rel(LightingService, LightingStatesInterpreter , "Получение отформатированной команды", "HTTP")
  Rel(LightingStatesInterpreter, LightingService , "Получение состояния", "HTTP")
  Rel(LightingService, LightingDb, "Запись данных", "")
}

System_Boundary(GateSystem, "Gate Service") {
    Component_Ext(GateService, "Gate Service", "")
    Component_Ext(GateCommandInterpreter, "Интерпретатор команд", "")
    Component_Ext(GateStatesInterpreter, "Интерпретатор состояний", "")
    ComponentDb(GateDb, "Gate Db", "Postgres SQL", "хранит связку пользователь-оборудование и метрики состояний")

    Rel(GateService, GateCommandInterpreter, "Перевод команды в понятный оборудованию формат", "HTTP")
    Rel(GateCommandInterpreter, GateService , "Получение отформатированной команды", "HTTP")
    Rel(GateService, GateStatesInterpreter , "Получение отформатированной команды", "HTTP")
    Rel(GateStatesInterpreter, GateService , "Получение состояния", "HTTP")
    Rel(GateService, GateDb, "Запись данных", "")
}

System_Boundary(SurveillanceSystem, "Video Surveillance Service") {
    Component_Ext(VideoSurveillanceService, "VideoSurveillance Service", "")
    Component_Ext(VideoSurveillanceCommandInterpreter, "Интерпретатор команд", "")
    Component_Ext(VideoSurveillanceStatesInterpreter, "Интерпретатор состояний", "")
    ComponentDb(VideoSurveillanceDb, "VideoSurveillance Db", "Postgres SQL", "хранит связку пользователь-оборудование и метрики состояний")


    Rel(VideoSurveillanceService, VideoSurveillanceCommandInterpreter, "Перевод команды в понятный оборудованию формат", "HTTP")
    Rel(VideoSurveillanceCommandInterpreter, VideoSurveillanceService , "Получение отформатированной команды", "HTTP")
    Rel(VideoSurveillanceService, VideoSurveillanceStatesInterpreter , "Получение отформатированной команды", "HTTP")
    Rel(VideoSurveillanceStatesInterpreter, VideoSurveillanceService , "Получение состояния", "HTTP")
    Rel(VideoSurveillanceService, VideoSurveillanceDb, "Запись данных", "")
}

System_Boundary(VideoStorageSystem, "Video Storage Service") {
  Component(VideoStorageService, "Video Storage Api", "API для организации храни")
  Component_Ext(VideoStorageService, "Сервис логики организации видео", "")
  Component_Ext(filesystem, "Видео записи", "FAT32", $tags="files")
  ComponentDb(VideoStorageDb, "VideoStorage Db", "MongoDb", "хранит связку видео файлов и их дат с пользователем")

  Rel(VideoStorageService, filesystem, "Запись файла", "SFTP")
  Rel(VideoStorageService, VideoStorageDb, "Запись данных", "")
}

Rel(kafka, UserService, "", "Обмен пользовательскими и системными командами")
Rel(kafka, LightingService, "", "Обмен пользовательскими и системными командами")
Rel(kafka, GateService, "", "Обмен пользовательскими и системными командами")
Rel(kafka, VideoSurveillanceService, "", "Обмен пользовательскими и системными командами")
Rel(kafka, TempModule, "", "Получение новых данных о температуре с датчиков")
Rel(UserService, kafka, "")
Rel(LightingService, kafka, "")
Rel(GateService, kafka, "")

Rel(VideoSurveillanceService, VideoStorageService, "SFTP или HTTP")

Rel(UserService, HeatingService, "HTTP", "Создание, в системе, профиля оборудования, связанного с пользователем")
Rel(UserService, LightingService, "HTTP", "Создание, в системе, профиля оборудования, связанного с пользователем")
@enduml